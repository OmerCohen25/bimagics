<!DOCTYPE html>
<html lang="he" dir="rtl">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AI Dashboard Generator - Live Demo</title>
    <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Assistant:wght@300;400;600;700&display=swap" rel="stylesheet">
    <style>
        :root {
            --bg-color: #111827;
            --card-color: #1F2937;
            --primary-color: #38BDF8;
            --secondary-color: #818CF8;
            --text-color: #E5E7EB;
            --text-muted-color: #9CA3AF;
            --success-color: #34D399;
            --border-color: rgba(255, 255, 255, 0.1);
            --font-family: 'Assistant', sans-serif;
        }

        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
        }

        body {
            font-family: var(--font-family);
            background-color: var(--bg-color);
            color: var(--text-color);
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            padding: 2rem;
            overflow-x: hidden;
        }

        .container {
            width: 100%;
            max-width: 1400px;
            margin: auto;
        }

        /* --- Screens --- */
        .screen {
            display: none;
            flex-direction: column;
            align-items: center;
            text-align: center;
            width: 100%;
        }

        .screen.active {
            display: flex;
            animation: fadeIn 0.8s ease-in-out;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }

        /* --- Welcome Screen --- */
        #welcome-screen h1 {
            font-size: 3.5rem;
            font-weight: 700;
            background: linear-gradient(90deg, var(--primary-color), var(--secondary-color));
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            margin-bottom: 1rem;
        }

        #welcome-screen p {
            font-size: 1.25rem;
            color: var(--text-muted-color);
            max-width: 600px;
            margin-bottom: 2.5rem;
        }

        /* --- Question Screen --- */
        #question-screen h2 {
            font-size: 2.5rem;
            margin-bottom: 2rem;
        }
        .questions-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 1.5rem;
            width: 100%;
            max-width: 1000px;
            margin-bottom: 2.5rem;
        }
        .question-card {
            background: var(--card-color);
            border: 1px solid var(--border-color);
            border-radius: 12px;
            padding: 1.5rem;
            text-align: right;
            cursor: pointer;
            transition: transform 0.2s ease, box-shadow 0.2s ease, border-color 0.2s ease;
        }
        .question-card:hover {
            transform: translateY(-5px);
            border-color: var(--primary-color);
            box-shadow: 0 10px 25px rgba(56, 189, 248, 0.1);
        }
        .question-card input {
            display: none;
        }
        .question-card label {
            font-size: 1.1rem;
            cursor: pointer;
            display: flex;
            align-items: center;
            gap: 1rem;
        }
        .custom-checkbox {
            width: 24px;
            height: 24px;
            border: 2px solid var(--text-muted-color);
            border-radius: 6px;
            display: flex;
            justify-content: center;
            align-items: center;
            transition: all 0.2s ease;
            flex-shrink: 0;
        }
        .custom-checkbox .checkmark {
            width: 14px;
            height: 14px;
            background-color: var(--primary-color);
            border-radius: 3px;
            transform: scale(0);
            transition: transform 0.2s ease;
        }
        .question-card input:checked + label .custom-checkbox {
            border-color: var(--primary-color);
        }
        .question-card input:checked + label .custom-checkbox .checkmark {
            transform: scale(1);
        }

        /* --- Loading Screen --- */
        #loading-screen .loader {
            width: 80px;
            height: 80px;
            border: 5px solid var(--border-color);
            border-top-color: var(--primary-color);
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin-bottom: 2rem;
        }
        #loading-screen p {
            font-size: 1.2rem;
            color: var(--text-muted-color);
            animation: pulse 1.5s infinite ease-in-out;
        }
        @keyframes spin {
            to { transform: rotate(360deg); }
        }
        @keyframes pulse {
            0%, 100% { opacity: 0.7; }
            50% { opacity: 1; }
        }

        /* --- Results Screen --- */
        #results-screen {
            width: 100%;
        }
        .results-header {
            width: 100%;
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 2rem;
            flex-wrap: wrap;
            gap: 1rem;
        }
        .results-header h2 {
            font-size: 2.5rem;
            text-align: right;
        }
        #dashboard-container {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
            gap: 1.5rem;
            width: 100%;
            margin-bottom: 3rem;
        }
        .chart-card {
            background: var(--card-color);
            border: 1px solid var(--border-color);
            border-radius: 12px;
            padding: 1rem;
            min-height: 400px;
        }
        .plotly-chart {
            width: 100%;
            height: 100%;
        }
        
        #code-viewer-container {
            background: #0d1117;
            border: 1px solid var(--border-color);
            border-radius: 12px;
            padding: 1.5rem;
            width: 100%;
            text-align: left;
        }
        #code-viewer-container h3 {
            font-size: 1.5rem;
            margin-bottom: 1rem;
            padding-bottom: 1rem;
            border-bottom: 1px solid var(--border-color);
        }
        #code-block {
            white-space: pre-wrap;
            font-family: 'SF Mono', 'Fira Code', 'Menlo', monospace;
            font-size: 0.9rem;
            line-height: 1.6;
            color: #c9d1d9;
            max-height: 500px;
            overflow-y: auto;
        }
        /* --- General Button --- */
        .btn {
            background: linear-gradient(90deg, var(--primary-color), var(--secondary-color));
            color: var(--bg-color);
            font-weight: 700;
            font-size: 1.1rem;
            padding: 0.8rem 2rem;
            border: none;
            border-radius: 50px;
            cursor: pointer;
            transition: transform 0.2s ease, box-shadow 0.2s ease;
            text-decoration: none;
        }
        .btn:hover {
            transform: translateY(-3px);
            box-shadow: 0 8px 20px rgba(129, 140, 248, 0.25);
        }
        
        /* Responsive */
        @media (max-width: 768px) {
            body { padding: 1rem; }
            #welcome-screen h1 { font-size: 2.5rem; }
            #welcome-screen p { font-size: 1rem; }
            #question-screen h2, #results-screen h2 { font-size: 2rem; }
            .questions-grid { grid-template-columns: 1fr; }
            #dashboard-container { grid-template-columns: 1fr; }
            .results-header { justify-content: center; text-align: center; }
        }
    </style>
</head>
<body>

    <div class="container">
        <!-- Screen 1: Welcome -->
        <section id="welcome-screen" class="screen active">
            <h1>הפוך טקסט לדשבורד חכם</h1>
            <p>חווה את העתיד של ניתוח נתונים. בחר את התובנות שמעניינות אותך, והבינה המלאכותית שלנו תבנה עבורך דשבורד ויזואלי ואינטראקטיבי תוך שניות.</p>
            <button class="btn" onclick="showScreen('question-screen')">התחל עכשיו</button>
        </section>

        <!-- Screen 2: Questions -->
        <section id="question-screen" class="screen">
            <h2>מה תרצה לראות בדשבורד שלך?</h2>
            <div class="questions-grid">
                <div class="question-card" onclick="toggleCheckbox('q1')">
                    <input type="checkbox" id="q1" data-chart="salesTrend">
                    <label for="q1">
                        <span class="custom-checkbox"><span class="checkmark"></span></span>
                        מגמת מכירות חודשית בשנה האחרונה
                    </label>
                </div>
                <div class="question-card" onclick="toggleCheckbox('q2')">
                    <input type="checkbox" id="q2" data-chart="userDemographics">
                    <label for="q2">
                        <span class="custom-checkbox"><span class="checkmark"></span></span>
                        התפלגות דמוגרפית של משתמשים לפי מדינה
                    </label>
                </div>
                <div class="question-card" onclick="toggleCheckbox('q3')">
                    <input type="checkbox" id="q3" data-chart="productPerformance">
                    <label for="q3">
                        <span class="custom-checkbox"><span class="checkmark"></span></span>
                        ניתוח ביצועים של 5 המוצרים המובילים
                    </label>
                </div>
                <div class="question-card" onclick="toggleCheckbox('q4')">
                    <input type="checkbox" id="q4" data-chart="trafficSource">
                    <label for="q4">
                        <span class="custom-checkbox"><span class="checkmark"></span></span>
                        פירוט מקורות תנועה לאתר (אורגני, ישיר, הפניות)
                    </label>
                </div>
            </div>
            <button class="btn" onclick="generateDashboard()">צור את הדשבורד שלי</button>
        </section>

        <!-- Screen 3: Loading -->
        <section id="loading-screen" class="screen">
            <div class="loader"></div>
            <p>הבינה המלאכותית שלנו עובדת... מנתחת בקשה, מייצרת מודלים ובונה ויזואליזציות...</p>
        </section>

        <!-- Screen 4: Results -->
        <section id="results-screen" class="screen">
            <div class="results-header">
                <h2>הדשבורד שלך מוכן!</h2>
                <button class="btn" onclick="showScreen('question-screen')">התחל מחדש</button>
            </div>
            <div id="dashboard-container"></div>
            <div id="code-viewer-container">
                <h3>הקוד שה-AI יצר מאחורי הקלעים:</h3>
                <pre id="code-block"></pre>
            </div>
        </section>
    </div>

<script>
// --- Navigation Logic ---
function showScreen(screenId) {
    document.querySelectorAll('.screen').forEach(screen => {
        screen.classList.remove('active');
    });
    document.getElementById(screenId).classList.add('active');
    
    // Reset results when starting over
    if (screenId === 'question-screen') {
        document.getElementById('dashboard-container').innerHTML = '';
        document.getElementById('code-block').innerHTML = '';
    }
}

function toggleCheckbox(id) {
    const checkbox = document.getElementById(id);
    checkbox.checked = !checkbox.checked;
}

// --- Dashboard Generation Logic ---
function generateDashboard() {
    const selectedCharts = [];
    document.querySelectorAll('.questions-grid input[type="checkbox"]:checked').forEach(cb => {
        selectedCharts.push(cb.dataset.chart);
    });

    if (selectedCharts.length === 0) {
        alert("אנא בחר לפחות תובנה אחת להצגה.");
        return;
    }

    showScreen('loading-screen');

    setTimeout(() => {
        const dashboardContainer = document.getElementById('dashboard-container');
        const codeBlock = document.getElementById('code-block');
        
        dashboardContainer.innerHTML = ''; // Clear previous charts
        codeBlock.innerHTML = ''; // Clear previous code

        let fullCode = `import pandas as pd\nimport plotly.express as px\n\n# AI Generated Script\n# ---------------------\n\n`;

        selectedCharts.forEach(chartType => {
            const chartId = `chart-${chartType}`;
            const chartCard = document.createElement('div');
            chartCard.className = 'chart-card';
            chartCard.id = chartId;
            dashboardContainer.appendChild(chartCard);

            const { plotFunction, code } = chartGenerators[chartType]();
            plotFunction(chartId);
            fullCode += code + '\n\n';
        });

        codeBlock.textContent = fullCode;
        showScreen('results-screen');
    }, 2500); // Simulate AI thinking time
}

// --- Chart and Code Generators ---
const chartGenerators = {
    salesTrend: () => {
        const plotFunction = (elementId) => {
            const months = ['ינו', 'פבר', 'מרץ', 'אפר', 'מאי', 'יוני', 'יולי', 'אוג', 'ספט', 'אוק', 'נוב', 'דצמ'];
            const sales = Array.from({length: 12}, () => Math.floor(Math.random() * (80000 - 30000 + 1)) + 30000);
            const trace = {
                x: months,
                y: sales,
                type: 'scatter',
                mode: 'lines+markers',
                marker: { color: 'rgba(56, 189, 248, 1)', size: 8 },
                line: { color: 'rgba(56, 189, 248, 0.7)', width: 3 }
            };
            Plotly.newPlot(elementId, [trace], getPlotlyLayout('מגמת מכירות חודשית'), {responsive: true});
        };
        const code = `
# 1. Sales Trend Analysis
sales_data = {
    'Month': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
    'Sales': [45000, 48000, 55000, 52000, 61000, 65000, 72000, 68000, 75000, 78000, 82000, 90000]
}
sales_df = pd.DataFrame(sales_data)
fig_sales = px.line(sales_df, x='Month', y='Sales', title='Monthly Sales Trend', markers=True)
fig_sales.show()`;
        return { plotFunction, code };
    },

    userDemographics: () => {
        const plotFunction = (elementId) => {
            const data = [{
                values: [45, 25, 15, 10, 5],
                labels: ['ארה"ב', 'ישראל', 'גרמניה', 'בריטניה', 'קנדה'],
                type: 'pie',
                hole: .4,
                marker: {
                    colors: ['#38BDF8', '#818CF8', '#A78BFA', '#F472B6', '#FB923C']
                }
            }];
            Plotly.newPlot(elementId, data, getPlotlyLayout('התפלגות משתמשים לפי מדינה'), {responsive: true});
        };
        const code = `
# 2. User Demographics
demographics_data = {
    'Country': ['USA', 'Israel', 'Germany', 'UK', 'Canada'],
    'Users': [4500, 2500, 1500, 1000, 500]
}
demographics_df = pd.DataFrame(demographics_data)
fig_demographics = px.pie(demographics_df, values='Users', names='Country', title='User Distribution by Country', hole=0.4)
fig_demographics.show()`;
        return { plotFunction, code };
    },

    productPerformance: () => {
        const plotFunction = (elementId) => {
            const products = ['מוצר אלפא', 'מוצר בטא', 'מוצר גמא', 'מוצר דלתא', 'מוצר אפסילון'];
            const revenue = Array.from({length: 5}, () => Math.floor(Math.random() * (20000 - 5000 + 1)) + 5000).sort((a,b) => b-a);
            const trace = {
                x: products,
                y: revenue,
                type: 'bar',
                marker: {
                    color: revenue,
                    colorscale: 'Viridis'
                }
            };
            Plotly.newPlot(elementId, [trace], getPlotlyLayout('ביצועי 5 המוצרים המובילים'), {responsive: true});
        };
        const code = `
# 3. Top 5 Product Performance
product_data = {
    'Product': ['Product A', 'Product B', 'Product C', 'Product D', 'Product E'],
    'Revenue': [18500, 15200, 12300, 10800, 9500]
}
product_df = pd.DataFrame(product_data)
fig_products = px.bar(product_df, x='Product', y='Revenue', title='Top 5 Performing Products', color='Revenue')
fig_products.show()`;
        return { plotFunction, code };
    },

    trafficSource: () => {
        const plotFunction = (elementId) => {
            const data = [{
                values: [55, 30, 15],
                labels: ['חיפוש אורגני', 'תנועה ישירה', 'הפניות'],
                type: 'pie',
                marker: {
                    colors: ['#34D399', '#60A5FA', '#FBBF24']
                }
            }];
            Plotly.newPlot(elementId, data, getPlotlyLayout('מקורות תנועה לאתר'), {responsive: true});
        };
        const code = `
# 4. Website Traffic Sources
traffic_data = {
    'Source': ['Organic Search', 'Direct', 'Referral'],
    'Sessions': [5500, 3000, 1500]
}
traffic_df = pd.DataFrame(traffic_data)
fig_traffic = px.pie(traffic_df, values='Sessions', names='Source', title='Website Traffic Sources')
fig_traffic.show()`;
        return { plotFunction, code };
    }
};

// --- Plotly Helper ---
function getPlotlyLayout(title) {
    return {
        title: {
            text: title,
            font: {
                color: 'var(--text-color)',
                size: 18,
                family: 'var(--font-family)'
            }
        },
        paper_bgcolor: 'rgba(0,0,0,0)',
        plot_bgcolor: 'rgba(0,0,0,0)',
        font: {
            color: 'var(--text-muted-color)',
            family: 'var(--font-family)'
        },
        xaxis: {
            gridcolor: 'rgba(255, 255, 255, 0.1)',
            zerolinecolor: 'rgba(255, 255, 255, 0.2)'
        },
        yaxis: {
            gridcolor: 'rgba(255, 255, 255, 0.1)',
            zerolinecolor: 'rgba(255, 255, 255, 0.2)'
        },
        legend: {
            orientation: 'h',
            y: -0.2
        },
        margin: { l: 50, r: 20, b: 50, t: 50, pad: 4 }
    };
}

</script>

</body>
</html>

